// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BikeModals {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Int
  image        String?
  topSpeed     Int
  range        Int
  chargingTime Int
  weight       Int
  brandId      String
  brand        Brand    @relation(fields: [brandId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Bike         Bike[]
}

model Brand {
  id        String       @id @default(uuid())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  bikes     BikeModals[]
}

enum ROLES {
  MANUFACTURER
  YARD_MANAGER
  FRANCHISEE_MANAGER
  CUSTOMER
}

model Users {
  sys_id        String  @id @default(cuid())
  username      String  @unique
  avatar        String?
  email         String  @unique
  firstName     String
  lastName      String?
  password      String
  isPasswordSet Boolean @default(false)

  role      ROLES   @default(CUSTOMER)
  blocked    Boolean @default(false)
  isVerified Boolean @default(false)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verification_tokens   VerificationTokens[]  @relation("verificationToken")
  password_reset_tokens PasswordResetTokens[] @relation("resetPasswordToken")
  customerBikes         Bike[]                @relation("CustomerBikes")
  manufacturerBikes     Bike[]                @relation("ManufacturerBikes")
  bikesetuYardBikes     Bike[]                @relation("BikesetuYardBikes")
  franchiseeBikes       Bike[]                @relation("FranchiseeBikes")
}

model VerificationTokens {
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      Users    @relation("verificationToken", fields: [userId], references: [sys_id])
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user Users @relation("resetPasswordToken", fields: [userId], references: [sys_id])
}

enum BikeStatus {
  MANUFACTURING
  MANUFACTURED
  IN_TRANSIT_TO_YARD
  AT_BIKESETU_YARD
  IN_TRANSIT_TO_FRANCHISEE
  AT_FRANCHISEE
  DELIVERED_TO_CUSTOMER
}

model Bike {
  id              String     @id @default(uuid())
  modalId         String
  modal           BikeModals @relation(fields: [modalId], references: [id])
  status          BikeStatus
  manufacturerId  String
  manufacturer    Users      @relation("ManufacturerBikes", fields: [manufacturerId], references: [sys_id])
  bikesetuYardId  String?
  bikesetuYard    Users?     @relation("BikesetuYardBikes", fields: [bikesetuYardId], references: [sys_id])
  franchiseeId    String?
  franchisee      Users?     @relation("FranchiseeBikes", fields: [franchiseeId], references: [sys_id])
  customerId      String?
  customer        Users?     @relation("CustomerBikes", fields: [customerId], references: [sys_id])
  arrivalDate     DateTime?
  departureDate   DateTime?
  deliveryDate    DateTime?
  nextDestination String?
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Location {
  id         String @id @default(uuid())
  address    String
  city       String
  state      String
  country    String
  postalCode String

  users Users[]
}
